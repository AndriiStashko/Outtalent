class Solution:
    def multiply(self, T, M):
        a = (T[0][0] * M[0][0] + T[0][1] * M[1][0] + T[0][2] * M[2][0])
        b = (T[0][0] * M[0][1] + T[0][1] * M[1][1] + T[0][2] * M[2][1])
        c = (T[0][0] * M[0][2] + T[0][1] * M[1][2] + T[0][2] * M[2][2])
        d = (T[1][0] * M[0][0] + T[1][1] * M[1][0] + T[1][2] * M[2][0])
        e = (T[1][0] * M[0][1] + T[1][1] * M[1][1] + T[1][2] * M[2][1])
        f = (T[1][0] * M[0][2] + T[1][1] * M[1][2] + T[1][2] * M[2][2])
        g = (T[2][0] * M[0][0] + T[2][1] * M[1][0] + T[2][2] * M[2][0])
        h = (T[2][0] * M[0][1] + T[2][1] * M[1][1] + T[2][2] * M[2][1])
        i = (T[2][0] * M[0][2] + T[2][1] * M[1][2] + T[2][2] * M[2][2])

        T[0][0] = a
        T[0][1] = b
        T[0][2] = c
        T[1][0] = d
        T[1][1] = e
        T[1][2] = f
        T[2][0] = g
        T[2][1] = h
        T[2][2] = i

    def power(self, T, n):
        if n == 0 or n == 1: return

        self.power(T, n // 2)

        self.multiply(T, T)

        if n % 2: self.multiply(T, [[1, 1, 1], [1, 0, 0], [0, 1, 0]])

    def tribonacci(self, n: int) -> int:
        if n == 0: return 0
        if n <= 2: return 1

        T = [[1, 1, 1], [1, 0, 0], [0, 1, 0]]

        self.power(T, n - 1)

        return T[0][0]
